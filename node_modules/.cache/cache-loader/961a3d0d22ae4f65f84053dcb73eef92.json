{"remainingRequest":"/Users/robink/Desktop/dinnerplanner-html-vue-master/node_modules/babel-loader/lib/index.js!/Users/robink/Desktop/dinnerplanner-html-vue-master/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/robink/Desktop/dinnerplanner-html-vue-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/robink/Desktop/dinnerplanner-html-vue-master/src/components/Sidebar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/robink/Desktop/dinnerplanner-html-vue-master/src/components/Sidebar.vue","mtime":1551143397000},{"path":"/Users/robink/Desktop/dinnerplanner-html-vue-master/package.json","mtime":1549803900000},{"path":"/Users/robink/Desktop/dinnerplanner-html-vue-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/robink/Desktop/dinnerplanner-html-vue-master/node_modules/babel-loader/lib/index.js","mtime":1519636541000},{"path":"/Users/robink/Desktop/dinnerplanner-html-vue-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/robink/Desktop/dinnerplanner-html-vue-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport modelInstance from \"../data/DinnerModel\";\nexport default {\n  props: [\"model\"],\n  // this methods is called by React lifecycle when the\n  // component is created that's a good place to setup model observer\n  created: function created() {\n    this.model.addObserver(this);\n  },\n  // this is called when component is removed destroyed\n  // good place to remove observer\n  beforeDestroy: function beforeDestroy() {\n    this.model.removeObserver(this);\n  },\n  // we define and initalise the data we want to use and modify in the component\n  data: function data() {\n    return {\n      numberOfGuests: this.model.getNumberOfGuests(),\n      menu: this.model.getMenu()\n    };\n  },\n  methods: {\n    // in our update function we modify the the property of\n    // the compoented which will cause the component to re-render\n    update: function update() {\n      this.numberOfGuests = this.model.getNumberOfGuests();\n      this.menu = this.model.getMenu();\n    },\n    // our handler for the input's on change event\n    onDidChangeNumberOfGuests: function onDidChangeNumberOfGuests(e) {\n      this.model.setNumberOfGuests(+e.target.value);\n    },\n    dishPrice: function dishPrice() {\n      return 1 * this.model.getNumberOfGuests(); //Will later change 1 to actual price of dish!\n    }\n  }\n};",{"version":3,"sources":["Sidebar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA;AAEA;UAEA;AACA;AACA;8BACA;2BACA;AAEA;AACA;AACA;0CACA;8BACA;AAEA;AACA;wBACA;;iCAEA;uBACA,AACA;AAHA;AAKA;;AAEA;AACA;8BACA;uCACA;6BACA;AAEA;AACA;qEACA;6CACA;AACA;oCACA;iDACA;AAEA,AACA;AAhBA;AAtBA","file":"Sidebar.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"sidebar\">\n      <h3>This is the sidebar</h3>\n      <p>\n        People:\n        <input\n          type=\"number\"\n          :value=\"numberOfGuests\"\n          @input=\"onDidChangeNumberOfGuests\"\n          @change=\"onDidChangeNumberOfGuests\"\n        >\n        <br>\n        Total number of guests: {{ numberOfGuests }}\n      </p>\n\n    <table>\n      <tr>\n        <th> <p> Dish Name </p></th>\n        <th><p>Cost</p></th>\n      <tr>\n      <tr v-for=\"dish in menu\" :id=\"dish.id\" :key=\"dish.id\"> \n        <td> {{dish.title}} </td>\n        <td> {{dishPrice()}} SEK </td>\n      </tr>\n    </table>\n  </div>\n</template>\n\n\n\n<script>\n\nimport modelInstance from \"../data/DinnerModel\";\n\nexport default {\n  props: [\"model\"],\n  // this methods is called by React lifecycle when the\n  // component is created that's a good place to setup model observer\n  created() {\n    this.model.addObserver(this);\n  },\n\n  // this is called when component is removed destroyed\n  // good place to remove observer\n  beforeDestroy() {\n    this.model.removeObserver(this);\n  },\n\n  // we define and initalise the data we want to use and modify in the component\n  data() {\n    return {\n      numberOfGuests: this.model.getNumberOfGuests(),\n      menu: this.model.getMenu()\n    };\n  },\n\n  methods: {\n    // in our update function we modify the the property of\n    // the compoented which will cause the component to re-render\n    update() {\n      this.numberOfGuests = this.model.getNumberOfGuests();\n      this.menu = this.model.getMenu();\n    },\n\n    // our handler for the input's on change event\n    onDidChangeNumberOfGuests(e) {\n      this.model.setNumberOfGuests(+e.target.value);\n    },\n    dishPrice(){\n      return (1 * this.model.getNumberOfGuests()); //Will later change 1 to actual price of dish!\n    }\n\n  }\n};\n</script>\n\n<style>\n\n.sidebar {\n  \n  background: grey;\n  width: 300px;\n  height: 500px;\n}\n</style>\n\n"]}]}