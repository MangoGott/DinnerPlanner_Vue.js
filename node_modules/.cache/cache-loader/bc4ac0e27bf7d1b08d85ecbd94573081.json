{"remainingRequest":"/Users/robink/Documents/GitHub/Vue/Vue_Group70/node_modules/babel-loader/lib/index.js!/Users/robink/Documents/GitHub/Vue/Vue_Group70/node_modules/eslint-loader/index.js??ref--13-0!/Users/robink/Documents/GitHub/Vue/Vue_Group70/src/data/DinnerModel.js","dependencies":[{"path":"/Users/robink/Documents/GitHub/Vue/Vue_Group70/src/data/DinnerModel.js","mtime":1551142915000},{"path":"/Users/robink/Documents/GitHub/Vue/Vue_Group70/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/robink/Documents/GitHub/Vue/Vue_Group70/node_modules/babel-loader/lib/index.js","mtime":1519636541000},{"path":"/Users/robink/Documents/GitHub/Vue/Vue_Group70/node_modules/eslint-loader/index.js","mtime":1519638534000}],"contextDependencies":[],"result":["import ObservableModel from \"./ObservableModel\";\nimport API_KEY from \"./API_KEY.js\";\nconst BASE_URL = \"http://sunset.nada.kth.se:8080/iprog/group/70\";\nconst httpOptions = {\n  headers: {\n    \"X-Mashape-Key\": API_KEY\n  }\n};\n\nclass DinnerModel extends ObservableModel {\n  constructor() {\n    super();\n    this._numberOfGuests = 4;\n    this.getNumberOfGuests();\n    this.menu = [];\n    this.type = \"\";\n    this.filter = \"\";\n    this.selectedDish;\n  }\n  /**\n   * Get the number of guests\n   * @returns {number}\n   */\n\n\n  getNumberOfGuests() {\n    return this._numberOfGuests;\n  }\n  /**\n   * Set number of guests\n   * @param {number} num\n   */\n\n\n  setNumberOfGuests(num) {\n    this._numberOfGuests = num; // this.getDish(592479).then(dishX => this.addToMenu(dishX));\n\n    this.notifyObservers();\n  }\n\n  getMenu() {\n    return this.menu;\n  }\n\n  addMenu(dish) {\n    this.menu.push(dish); //LÄgg till check för dubbletter. \n\n    console.log(this.getMenu());\n    this.notifyObservers();\n  }\n\n  setSelectedID(id) {\n    this.selectedDish = id;\n    this.notifyObservers();\n  }\n\n  getSelectedID() {\n    return this.selectedDish;\n  } // API methods\n\n  /**\n   * Do an API call to the search API endpoint.\n   * @returns {Promise<any>}\n   */\n\n\n  getAllDishes() {\n    const url = `${BASE_URL}/recipes/search`;\n    return fetch(url, httpOptions).then(this.processResponse);\n  }\n\n  searchDish() {\n    const url = `${BASE_URL}/recipes/search?number=10&offset=0&type='` + this.type + `&query=` + this.filter;\n    return fetch(url, httpOptions).then(this.processResponse);\n  }\n\n  setFilter(filter) {\n    this.filter = filter;\n    this.notifyObservers();\n  }\n\n  setType(type) {\n    this.type = type;\n    this.notifyObservers();\n  }\n\n  getDish(id) {\n    const url = `${BASE_URL}/recipes/` + id + `/information`;\n    return fetch(url, httpOptions).then(this.processResponse);\n  }\n\n  processResponse(response) {\n    if (response.ok) {\n      return response.json();\n    }\n\n    throw response;\n  }\n\n} // Export an instance of DinnerModel\n\n\nconst modelInstance = new DinnerModel();\nexport default modelInstance; //TODO ADD BetterNotify and update functions",{"version":3,"sources":["src/data/DinnerModel.js"],"names":["ObservableModel","API_KEY","BASE_URL","httpOptions","headers","DinnerModel","constructor","_numberOfGuests","getNumberOfGuests","menu","type","filter","selectedDish","setNumberOfGuests","num","notifyObservers","getMenu","addMenu","dish","push","console","log","setSelectedID","id","getSelectedID","getAllDishes","url","fetch","then","processResponse","searchDish","setFilter","setType","getDish","response","ok","json","modelInstance"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,mBAA5B;AACA,OAAQC,OAAR,MAAqB,cAArB;AAEA,MAAMC,WAAW,+CAAjB;AACA,MAAMC,cAAc;AAClBC,WAAS;AAAE,qBAAiBH;AAAnB;AADS,CAApB;;AAIA,MAAMI,WAAN,SAA0BL,eAA1B,CAA0C;AACxCM,gBAAc;AACZ;AACA,SAAKC,eAAL,GAAuB,CAAvB;AACA,SAAKC,iBAAL;AACA,SAAKC,IAAL,GAAY,EAAZ;AACA,SAAKC,IAAL,GAAY,EAAZ;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,YAAL;AACD;AAED;;;;;;AAIAJ,sBAAoB;AAClB,WAAO,KAAKD,eAAZ;AACD;AAED;;;;;;AAIAM,oBAAkBC,GAAlB,EAAuB;AACrB,SAAKP,eAAL,GAAuBO,GAAvB,CADqB,CAEtB;;AACC,SAAKC,eAAL;AACD;;AAEDC,YAAU;AACR,WAAO,KAAKP,IAAZ;AACA;;AAGFQ,UAAQC,IAAR,EAAc;AACZ,SAAKT,IAAL,CAAUU,IAAV,CAAeD,IAAf,EADY,CACU;;AACtBE,YAAQC,GAAR,CAAY,KAAKL,OAAL,EAAZ;AACA,SAAKD,eAAL;AACD;;AAEDO,gBAAcC,EAAd,EAAkB;AAChB,SAAKX,YAAL,GAAoBW,EAApB;AACA,SAAKR,eAAL;AACD;;AAEDS,kBAAgB;AACd,WAAO,KAAKZ,YAAZ;AACD,GA/CuC,CAkDxC;;AACA;;;;;;AAIAa,iBAAe;AACb,UAAMC,MAAO,GAAExB,QAAS,iBAAxB;AACA,WAAOyB,MAAMD,GAAN,EAAWvB,WAAX,EAAwByB,IAAxB,CAA6B,KAAKC,eAAlC,CAAP;AACD;;AAEDC,eAAa;AACX,UAAMJ,MAAO,GAAExB,QAAS,2CAAZ,GAAwD,KAAKQ,IAA7D,GAAoE,SAApE,GAA+E,KAAKC,MAAhG;AACA,WAAOgB,MAAMD,GAAN,EAAWvB,WAAX,EAAwByB,IAAxB,CAA6B,KAAKC,eAAlC,CAAP;AAED;;AAEDE,YAAUpB,MAAV,EAAiB;AACf,SAAKA,MAAL,GAAcA,MAAd;AACA,SAAKI,eAAL;AACD;;AAEDiB,UAAQtB,IAAR,EAAa;AACX,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKK,eAAL;AACD;;AAEDkB,UAAQV,EAAR,EAAY;AACV,UAAMG,MAAO,GAAExB,QAAS,WAAZ,GAAyBqB,EAAzB,GAA8B,cAA1C;AACA,WAAOI,MAAMD,GAAN,EAAWvB,WAAX,EAAwByB,IAAxB,CAA6B,KAAKC,eAAlC,CAAP;AACD;;AAEDA,kBAAgBK,QAAhB,EAA0B;AACxB,QAAIA,SAASC,EAAb,EAAiB;AACf,aAAOD,SAASE,IAAT,EAAP;AACD;;AACD,UAAMF,QAAN;AACD;;AAtFuC,C,CAyF1C;;;AACA,MAAMG,gBAAgB,IAAIhC,WAAJ,EAAtB;AACA,eAAegC,aAAf,C,CAIA","file":"/Users/robink/Documents/GitHub/Vue/Vue_Group70/src/data/DinnerModel.js","sourceRoot":"/Users/robink/Documents/GitHub/Vue/Vue_Group70","sourcesContent":["import ObservableModel from \"./ObservableModel\";\nimport  API_KEY from \"./API_KEY.js\";\n\nconst BASE_URL = \"http://sunset.nada.kth.se:8080/iprog/group/70\";\nconst httpOptions = {\n  headers: { \"X-Mashape-Key\": API_KEY }\n};\n\nclass DinnerModel extends ObservableModel {\n  constructor() {\n    super();\n    this._numberOfGuests = 4;\n    this.getNumberOfGuests();\n    this.menu = [];\n    this.type = \"\";\n    this.filter = \"\"; \n    this.selectedDish;\n  }\n\n  /**\n   * Get the number of guests\n   * @returns {number}\n   */\n  getNumberOfGuests() {\n    return this._numberOfGuests;\n  }\n\n  /**\n   * Set number of guests\n   * @param {number} num\n   */\n  setNumberOfGuests(num) {\n    this._numberOfGuests = num;\n   // this.getDish(592479).then(dishX => this.addToMenu(dishX));\n    this.notifyObservers();\n  }\n\n  getMenu() {\n    return this.menu;\n   }\n\n  \n  addMenu(dish) {\n    this.menu.push(dish); //LÄgg till check för dubbletter. \n    console.log(this.getMenu());\n    this.notifyObservers();\n  }\n  \n  setSelectedID(id) {\n    this.selectedDish = id;\n    this.notifyObservers();\n  }\n\n  getSelectedID() {\n    return this.selectedDish;\n  }\n  \n\n  // API methods\n  /**\n   * Do an API call to the search API endpoint.\n   * @returns {Promise<any>}\n   */\n  getAllDishes() {\n    const url = `${BASE_URL}/recipes/search`;\n    return fetch(url, httpOptions).then(this.processResponse);\n  }\n\n  searchDish() {\n    const url = `${BASE_URL}/recipes/search?number=10&offset=0&type='`+ this.type +`&query=` + this.filter;\n    return fetch(url, httpOptions).then(this.processResponse);\n\n  }\n\n  setFilter(filter){\n    this.filter = filter;\n    this.notifyObservers();\n  }\n\n  setType(type){\n    this.type = type;\n    this.notifyObservers();\n  }\n\n  getDish(id) {\n    const url = `${BASE_URL}/recipes/` + id +`/information`;\n    return fetch(url, httpOptions).then(this.processResponse);\n  }\n\n  processResponse(response) {\n    if (response.ok) {\n      return response.json();\n    }\n    throw response;\n  }\n}\n\n// Export an instance of DinnerModel\nconst modelInstance = new DinnerModel();\nexport default modelInstance;\n\n\n\n//TODO ADD BetterNotify and update functions"]}]}