{"remainingRequest":"/Users/robink/Desktop/dinnerplanner-html-vue-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/robink/Desktop/dinnerplanner-html-vue-master/src/components/Dishes.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/robink/Desktop/dinnerplanner-html-vue-master/src/components/Dishes.vue","mtime":1551143403000},{"path":"/Users/robink/Desktop/dinnerplanner-html-vue-master/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/robink/Desktop/dinnerplanner-html-vue-master/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/robink/Desktop/dinnerplanner-html-vue-master/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/robink/Desktop/dinnerplanner-html-vue-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/robink/Desktop/dinnerplanner-html-vue-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.dishes {\n  display: flex;\n  flex-flow: wrap;\n  width: 700px;\n  height: 400px;\n  overflow: scroll;\n  padding: 10px;\n}\n\n",{"version":3,"sources":["Dishes.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Dishes.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"Dishes\">\n    <h3>Dishes</h3>\n    \n      <em v-if='status === \"LOADING\"'>Loading...</em>\n      <b v-else-if='status === \"ERROR\"'>Failed to load data, please try again</b>\n      <div class=\"dishes\">\n      <item v-for=\"dish in dishes\" :id=\"dish.id\" :key=\"dish.id\" :dish=\"dish\" :model=\"model\"></item>\n      </div>\n  </div>\n</template>\n\n<script>\n  import modelInstance from \"../data/DinnerModel\";\n  import Item from \"@/components/Item\";\n  \n  export default {  \n    props: [\"model\"],\n    components: {\n      item: Item\n    },\n    mounted() {\n      // when data is retrieved we update it's properties\n      // this will cause the component to re-render\n      modelInstance.getAllDishes().then(dishes => {\n        this.status = \"LOADED\"\n        this.dishes = dishes.results\n      }).catch(() => {\n        this.status = \"ERROR\"\n      })\n      modelInstance.addObserver(this);\n    },\n    data() {\n      return {\n        status: \"LOADING\",\n        dishes: []\n      }\n    },\n    methods:{\n      \n      update(model, changeDetails){\n        modelInstance.searchDish().then(dishes => {\n        this.status = \"LOADED\"\n        this.dishes = dishes.results\n      }).catch(() => {\n        this.status = \"ERROR\"\n      })\n      }\n    }\n  }\n</script>\n\n<style>\n\n.dishes {\n  display: flex;\n  flex-flow: wrap;\n  width: 700px;\n  height: 400px;\n  overflow: scroll;\n  padding: 10px;\n}\n\n</style>\n\n\n\n\n\n}"]}]}